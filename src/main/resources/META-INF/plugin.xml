<!--
  ~ Copyright 2003-2023 The IdeaVim authors
  ~
  ~ Use of this source code is governed by an MIT-style
  ~ license that can be found in the LICENSE.txt file or at
  ~ https://opensource.org/licenses/MIT.
  -->

<idea-plugin url="https://plugins.jetbrains.com/plugin/164" xmlns:xi="http://www.w3.org/2001/XInclude">
  <name>IdeaVim</name>
  <id>IdeaVIM</id>
  <description><![CDATA[
      <p>Vim engine for JetBrains IDEs</p>
      <br/>
      <p>IdeaVim supports many Vim features including normal/insert/visual modes, motion keys, deletion/changing,
      marks, registers, some Ex commands, Vim regexps, configuration via ~/.ideavimrc, macros, Vim plugins, etc.</p>
      <br/>
      <p>See also:</p>
      <ul>
        <li><a href="https://github.com/JetBrains/ideavim">GitHub repository</a>: documentation and contributing</li>
        <li><a href="https://youtrack.jetbrains.com/issues/VIM">Issue tracker</a>: feature requests and bug reports</li>
      </ul>
    ]]></description>
  <version>SNAPSHOT</version>
  <vendor>JetBrains</vendor>

  <!-- Mark the plugin as compatible with RubyMine and other products based on the IntelliJ platform (including CWM) -->
  <depends>com.intellij.modules.platform</depends>
  <resource-bundle>messages.IdeaVimBundle</resource-bundle>

  <!-- IDE-Specific configurations -->
  <!--suppress PluginXmlValidity -->
  <depends optional="true" config-file="ides/ideavim-withRider.xml">com.intellij.modules.rider</depends>
  <!--suppress PluginXmlValidity -->
  <depends optional="true" config-file="ides/ideavim-withClionNova.xml">org.jetbrains.plugins.clion.radler</depends>
  <!--suppress PluginXmlValidity -->
  <depends optional="true" config-file="ides/ideavim-withAppCode.xml">com.intellij.modules.appcode</depends>
  <depends optional="true" config-file="ideavim-withAceJump.xml">AceJump</depends>

  <applicationListeners>
    <listener class="com.maddyhome.idea.vim.PyNotebooksCloseWorkaround"
              topic="com.intellij.openapi.project.ProjectManagerListener"/>
  </applicationListeners>

  <projectListeners>
    <listener class="com.maddyhome.idea.vim.group.JumpsListener"
              topic="com.intellij.openapi.fileEditor.impl.IdeDocumentHistoryImpl$RecentPlacesListener"/>
  </projectListeners>

  <extensionPoints>
    <extensionPoint name="vimExtension" beanClass="com.maddyhome.idea.vim.extension.ExtensionBeanClass" dynamic="true">
      <with attribute="implementation" implements="com.maddyhome.idea.vim.extension.VimExtension"/>

    </extensionPoint>
    <extensionPoint interface="com.maddyhome.idea.vim.ide.ClionNovaProvider" dynamic="true" name="clionNovaProvider"/>
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <applicationConfigurable groupId="editor" instance="com.maddyhome.idea.vim.ui.VimEmulationConfigurable"/>
    <projectService serviceImplementation="com.maddyhome.idea.vim.group.LastTabService"/>
    <statusBarWidgetFactory id="IdeaVimMode" implementation="com.maddyhome.idea.vim.ui.widgets.mode.ModeWidgetFactory" order="last, before Memory"/>
    <statusBarWidgetFactory id="IdeaVim-Icon" implementation="com.maddyhome.idea.vim.ui.StatusBarIconFactory" order="last, before IdeaVimMode"/>
    <statusBarWidgetFactory id="IdeaVimShowCmd" implementation="com.maddyhome.idea.vim.ui.ShowCmdStatusBarWidgetFactory" order="first"/>
    <statusBarWidgetFactory id="IdeaVimMacro" implementation="com.maddyhome.idea.vim.ui.widgets.macro.MacroWidgetFactory" order="first, after IdeaVimShowCmd"/>

    <applicationService serviceImplementation="com.maddyhome.idea.vim.VimPlugin"/>

    <!-- Initialise as early as possible so that we're ready to edit quickly. This is especially important for Rider,
         which (at least for 2020.1) has some long running activities that block other startup extensions. None of the
         core platform activities have IDs, so we can't use "before ID". We have to use "first" -->
    <postStartupActivity implementation="com.maddyhome.idea.vim.PluginStartup" order="first"/>
    <postStartupActivity implementation="com.maddyhome.idea.vim.handler.EditorHandlersChainLogger"/>
    <postStartupActivity implementation="com.maddyhome.idea.vim.handler.KeymapChecker"/>
    <postStartupActivity implementation="com.maddyhome.idea.vim.handler.CopilotKeymapCorrector"/>

    <editorFloatingToolbarProvider implementation="com.maddyhome.idea.vim.ui.ReloadFloatingToolbar"/>

    <actionPromoter implementation="com.maddyhome.idea.vim.key.VimActionsPromoter" order="last"/>

    <spellchecker.bundledDictionaryProvider implementation="com.maddyhome.idea.vim.VimBundledDictionaryProvider"/>

    <notificationGroup displayType="STICKY_BALLOON" id="ideavim-sticky"/>

    <!--suppress PluginXmlValidity -->
    <statistics.applicationUsagesCollector implementation="com.maddyhome.idea.vim.statistic.PluginState"/>
    <!--suppress PluginXmlValidity -->
    <statistics.applicationUsagesCollector implementation="com.maddyhome.idea.vim.statistic.OptionsState"/>
    <!--suppress PluginXmlValidity -->
    <statistics.applicationUsagesCollector implementation="com.maddyhome.idea.vim.statistic.VimscriptState"/>
    <!--suppress PluginXmlValidity -->
    <statistics.applicationUsagesCollector implementation="com.maddyhome.idea.vim.statistic.ShortcutConflictState"/>
    <!--suppress PluginXmlValidity -->
    <statistics.applicationUsagesCollector implementation="com.maddyhome.idea.vim.statistic.WidgetState"/>

    <statistics.counterUsagesCollector implementationClass="com.maddyhome.idea.vim.statistic.ActionTracker"/>


<!--    <localInspection language="textmate" shortName="UsePlug" bundle="messages.IdeaVimBundle"-->
<!--                     key="use.plug.inspection.display.name" groupKey="use.plug.inspection.group.display.name"-->
<!--                     enabledByDefault="true" level="WARNING"-->
<!--                     implementationClass="com.maddyhome.idea.vim.inspections.UsePlugSyntaxInspection"/>-->

<!--    Do not care about red handlers in order. They are necessary for proper ordering, and they'll be resolved when needed -->
    <editorActionHandler action="EditorEnter" implementationClass="com.maddyhome.idea.vim.handler.VimEnterHandler"
                         id="ideavim-enter"
                         order="before editorEnter, before rd.client.editor.enter, after smart-step-into-enter, after AceHandlerEnter, after jupyterCommandModeEnterKeyHandler, after swift.placeholder.enter"/>
    <editorActionHandler action="EditorEnter" implementationClass="com.maddyhome.idea.vim.handler.CaretShapeEnterEditorHandler"
                         id="ideavim-enter-shape"
                         order="before jupyterCommandModeEnterKeyHandler"/>

<!--    "first" is not defined for this handler as it leads to "unsatisfied ordering exception". Not sure exectly why, but it appears in tests-->
    <editorActionHandler action="EditorEscape" implementationClass="com.maddyhome.idea.vim.handler.VimEscHandler"
                         id="ideavim-esc"
                         order="after smart-step-into-escape, after AceHandlerEscape, before jupyterCommandModeEscKeyHandler, before templateEscape, before backend.escape"/>
    <editorActionHandler action="EditorEscape" implementationClass="com.maddyhome.idea.vim.handler.VimEscLoggerHandler"
                         id="ideavim-esc-logger"
                         order="first"/>
    <editorActionHandler action="EditorEnter" implementationClass="com.maddyhome.idea.vim.handler.VimEnterLoggerHandler"
                         id="ideavim-enter-logger"
                         order="first"/>
    <editorActionHandler action="EditorStartNewLine"
                         implementationClass="com.maddyhome.idea.vim.handler.StartNewLineDetector"
                         id="ideavim-start-new-line-detector"
                         order="first"/>
    <editorActionHandler action="EditorStartNewLineBefore"
                         implementationClass="com.maddyhome.idea.vim.handler.StartNewLineBeforeCurrentDetector"
                         id="ideavim-start-new-line-before-current-detector"
                         order="first"/>
  </extensions>

  <xi:include href="/META-INF/includes/ApplicationServices.xml" xpointer="xpointer(/idea-plugin/*)"/>
  <xi:include href="/META-INF/includes/VimExtensions.xml" xpointer="xpointer(/idea-plugin/*)"/>
  <xi:include href="/META-INF/includes/VimListeners.xml" xpointer="xpointer(/idea-plugin/*)"/>

  <actions resource-bundle="messages.IdeaVimBundle">
    <action id="VimPluginToggle" class="com.maddyhome.idea.vim.action.VimPluginToggleAction">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <!-- Internal -->
    <!--suppress PluginXmlI18n -->
    <action id="VimInternalAddBlockInlays" class="com.maddyhome.idea.vim.action.internal.AddBlockInlaysAction" text="Add Test Block Inlays | IdeaVim Internal" internal="true"/>
    <!--suppress PluginXmlI18n -->
    <action id="VimInternalAddInlineInlays" class="com.maddyhome.idea.vim.action.internal.AddInlineInlaysAction" text="Add Test Inline Inlays | IdeaVim Internal" internal="true"/>

    <action id="VimShortcutKeyAction" class="com.maddyhome.idea.vim.action.VimShortcutKeyAction"/>
    <action id="VimActions" class="com.maddyhome.idea.vim.ui.VimActions"/>
    <action id="CustomizeModeWidget" class="com.maddyhome.idea.vim.ui.widgets.mode.ModeWidgetPopup"/>

    <group id="IdeaVim.ReloadVimRc.group" class="com.maddyhome.idea.vim.ui.ReloadFloatingToolbarActionGroup">
      <action id="IdeaVim.ReloadVimRc.reload" class="com.maddyhome.idea.vim.ui.ReloadVimRc"
              use-shortcut-of="ExternalSystem.ProjectRefreshAction">
      </action>
    </group>

    <action id="VimFindActionIdAction" class="com.maddyhome.idea.vim.listener.FindActionIdAction"/>
  </actions>
</idea-plugin>
