<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>ComplexMethod:CmdHandler.kt$CmdHandler$private fun addAlias(cmd: ExCommand, editor: Editor?): Boolean</ID>
    <ID>ComplexMethod:CommandState.kt$CommandState$ fun toVimNotation(): String</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexMethod:HistoryHandler.kt$HistoryHandler$override fun execute(editor: Editor, context: DataContext, cmd: ExCommand): Boolean</ID>
    <ID>ComplexMethod:OptionsManager.kt$OptionsManager$ fun parseOptionLine(editor: Editor?, args: String, failOnBad: Boolean): Boolean</ID>
    <ID>ComplexMethod:PutGroup.kt$PutGroup$private fun prepareDocumentAndGetStartOffsets( editor: Editor, caret: Caret, typeInRegister: SelectionType, data: PutData, additionalData: Map&lt;String, Any&gt; ): List&lt;Int&gt;</ID>
    <ID>ComplexMethod:SearchHelperKt.kt$// bounds are considered inside corresponding quotes fun checkInString(chars: CharSequence, currentPos: Int, str: Boolean): Boolean</ID>
    <ID>ComplexMethod:SearchHighlightsHelper.kt$ private fun updateSearchHighlights( pattern: String?, shouldIgnoreSmartCase: Boolean, showHighlights: Boolean, initialOffset: Int, searchRange: LineRange?, forwards: Boolean, forceUpdate: Boolean ): Int</ID>
    <ID>ComplexMethod:TabCloseHandler.kt$TabCloseHandler$ private fun getTabIndexToClose(arg: String, current: Int, last: Int): Int?</ID>
    <ID>ComplexMethod:VimExchangeExtension.kt$VimExchangeExtension.Operator$private fun compareExchanges(x: Exchange, y: Exchange): ExchangeCompareResult</ID>
    <ID>ComplexMethod:VimMultipleCursorsExtension.kt$VimMultipleCursorsExtension.NextOccurrenceHandler$override fun executeInWriteAction(editor: Editor, context: DataContext)</ID>
    <ID>ComplexMethod:VimShortcutKeyAction.kt$VimShortcutKeyAction$private fun isEnabled(e: AnActionEvent): Boolean</ID>
    <ID>LongMethod:CmdHandler.kt$CmdHandler$private fun addAlias(cmd: ExCommand, editor: Editor?): Boolean</ID>
    <ID>LongMethod:HistoryHandler.kt$HistoryHandler$override fun execute(editor: Editor, context: DataContext, cmd: ExCommand): Boolean</ID>
    <ID>LongMethod:OptionsManager.kt$OptionsManager$ fun parseOptionLine(editor: Editor?, args: String, failOnBad: Boolean): Boolean</ID>
    <ID>LongMethod:PutGroup.kt$PutGroup$private fun prepareDocumentAndGetStartOffsets( editor: Editor, caret: Caret, typeInRegister: SelectionType, data: PutData, additionalData: Map&lt;String, Any&gt; ): List&lt;Int&gt;</ID>
    <ID>LongMethod:VimMultipleCursorsExtension.kt$VimMultipleCursorsExtension.NextOccurrenceHandler$override fun executeInWriteAction(editor: Editor, context: DataContext)</ID>
    <ID>LoopWithTooManyJumpStatements:SearchHighlightsHelper.kt$for (project in projectManager.openProjects) { val current = FileEditorManager.getInstance(project).selectedTextEditor ?: continue // [VERSION UPDATE] 202+ Use editors val editors = EditorFactory.getInstance().getEditors(current.document, project) ?: continue for (editor in editors) { // Try to keep existing highlights if possible. Update if hlsearch has changed or if the pattern has changed. // Force update for the situations where the text is the same, but the ignore case values have changed. // E.g. Use `*` to search for a word (which ignores smartcase), then use `/&lt;Up&gt;` to search for the same pattern, // which will match smartcase. Or changing the smartcase/ignorecase settings if (shouldRemoveSearchHighlights(editor, pattern, showHighlights) || forceUpdate) { removeSearchHighlights(editor) } if (pattern == null) continue if (shouldAddAllSearchHighlights(editor, pattern, showHighlights)) { // hlsearch (+ incsearch/noincsearch) val startLine = searchRange?.startLine ?: 0 val endLine = searchRange?.endLine ?: -1 val results = SearchHelper.findAll(editor, pattern, startLine, endLine, shouldIgnoreCase(pattern, shouldIgnoreSmartCase)) if (results.isNotEmpty()) { currentMatchOffset = findClosestMatch(editor, results, initialOffset, forwards) highlightSearchResults(editor, pattern, results, currentMatchOffset) } editor.vimLastSearch = pattern } else if (shouldAddCurrentMatchSearchHighlight(pattern, showHighlights, initialOffset)) { // nohlsearch + incsearch val searchOptions = EnumSet.of(SearchOptions.WHOLE_FILE) if (wrapscan.isSet) searchOptions.add(SearchOptions.WRAP) if (shouldIgnoreSmartCase) searchOptions.add(SearchOptions.IGNORE_SMARTCASE) if (!forwards) searchOptions.add(SearchOptions.BACKWARDS) val result = SearchHelper.findPattern(editor, pattern, initialOffset, 1, searchOptions) if (result != null) { currentMatchOffset = result.startOffset val results = listOf(result) highlightSearchResults(editor, pattern, results, currentMatchOffset) } } else if (shouldMaintainCurrentMatchOffset(pattern, initialOffset)) { // incsearch. If nothing has changed (e.g. we've edited offset values in `/foo/e+2`) make sure we return the // current match offset so the caret remains at the current incsarch match val offset = editor.vimIncsearchCurrentMatchOffset if (offset != null) { currentMatchOffset = offset } } } }</ID>
    <ID>MagicNumber:ActionListHandler.kt$ActionListHandler$50</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$0.9f</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$1.75f</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$10</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$3</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$5</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$6</ID>
    <ID>MagicNumber:AddBlockInlaysAction.kt$AddBlockInlaysAction$7</ID>
    <ID>MagicNumber:AddInlineInlaysAction.kt$AddInlineInlaysAction$10</ID>
    <ID>MagicNumber:AddInlineInlaysAction.kt$AddInlineInlaysAction$20</ID>
    <ID>MagicNumber:AddInlineInlaysAction.kt$AddInlineInlaysAction$5</ID>
    <ID>MagicNumber:AddInlineInlaysAction.kt$AddInlineInlaysAction$7</ID>
    <ID>MagicNumber:BufferListHandler.kt$3</ID>
    <ID>MagicNumber:CmdHandler.kt$CmdHandler$11</ID>
    <ID>MagicNumber:CmdHandler.kt$CmdHandler$12</ID>
    <ID>MagicNumber:CommandBuilder.kt$CommandBuilder$10</ID>
    <ID>MagicNumber:CommandBuilder.kt$CommandBuilder$999999999</ID>
    <ID>MagicNumber:ConfigurationMigrators.kt$Version 6 to 7 config migration$6</ID>
    <ID>MagicNumber:ConfigurationMigrators.kt$Version 6 to 7 config migration$7</ID>
    <ID>MagicNumber:ExKeyBindings.kt$ExKeyBindings$0x05</ID>
    <ID>MagicNumber:ExKeyBindings.kt$ExKeyBindings$0x08</ID>
    <ID>MagicNumber:HistoryHandler.kt$HistoryHandler$7</ID>
    <ID>MagicNumber:JumpsHandler.kt$JumpsHandler$200</ID>
    <ID>MagicNumber:JumpsHandler.kt$JumpsHandler$3</ID>
    <ID>MagicNumber:JumpsHandler.kt$JumpsHandler$5</ID>
    <ID>MagicNumber:MarksHandler.kt$MarksHandler$200</ID>
    <ID>MagicNumber:MarksHandler.kt$MarksHandler$3</ID>
    <ID>MagicNumber:MarksHandler.kt$MarksHandler$5</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$100</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$1000</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$19</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$20</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$3</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$50</ID>
    <ID>MagicNumber:OptionsManager.kt$OptionsManager$80</ID>
    <ID>MagicNumber:ProcessExEntryAction.kt$ProcessExEntryAction$0x0a</ID>
    <ID>MagicNumber:RegistersHandler.kt$RegistersHandler$200</ID>
    <ID>MagicNumber:SearchHelperKt.kt$3</ID>
    <ID>MagicNumber:SelectLastFileHandler.kt$SelectLastFileHandler$999</ID>
    <ID>MagicNumber:SelectionType.kt$SelectionType.BLOCK_WISE$3</ID>
    <ID>MagicNumber:ShiftLeftHandler.kt$ShiftLeftHandler$31</ID>
    <ID>MagicNumber:ShiftRightHandler.kt$ShiftRightHandler$31</ID>
    <ID>MagicNumber:VimHighlightedYank.kt$VimHighlightedYank.HighlightHandler$3</ID>
    <ID>MagicNumber:VimHighlightedYank.kt$VimHighlightedYank.HighlightHandler$4</ID>
    <ID>MatchingDeclarationName:CommandDefinition.kt$CommandName</ID>
    <ID>MaxLineLength:ExBeanClass.kt$ExBeanClass$logger&lt;ExBeanClass&gt;().error("IdeaVim doesn't accept contributions to `vimActions` extension points. Please create a plugin using `VimExtension`. Plugin to blame: ${this.pluginDescriptor.pluginId}")</ID>
    <ID>MaxLineLength:NotificationService.kt$NotificationService$notification.addAction(AppendToIdeaVimRcAction(notification, "set clipboard+=ideaput", "ideaput") { OptionsManager.clipboard.append(ClipboardOptionsData.ideaput) })</ID>
    <ID>MaxLineLength:NotificationService.kt$NotificationService.AppendToIdeaVimRcAction$private inner</ID>
    <ID>MaxLineLength:NotificationService.kt$NotificationService.AppendToIdeaVimRcAction$val successNotification = Notification(IDEAVIM_NOTIFICATION_ID, IDEAVIM_NOTIFICATION_TITLE, "&lt;code&gt;$optionName&lt;/code&gt; is enabled", NotificationType.INFORMATION)</ID>
    <ID>MaxLineLength:OptionsManager.kt$OptionsManager$val clipboard = addOption(ListOption(ClipboardOptionsData.name, ClipboardOptionsData.abbr, arrayOf(ClipboardOptionsData.ideaput, "autoselect,exclude:cons\\|linux"), null))</ID>
    <ID>MaxLineLength:ReplaceWithRegister.kt$ReplaceWithRegister.Operator$val visualSelection = PutData.VisualSelection(mapOf(editor.caretModel.primaryCaret to VimSelection.create(range.startOffset, range.endOffset - 1, selectionType, editor)), selectionType)</ID>
    <ID>MaxLineLength:StatisticReporter.kt$StatisticReporter$val url = "https://plugins.jetbrains.com/plugins/list?pluginId=${VimPlugin.getPluginId().idString}&amp;build=$buildNumber&amp;pluginVersion=$version&amp;os=$os&amp;uuid=$uid"</ID>
    <ID>MaxLineLength:VimShortcutKeyAction.kt$VimShortcutKeyAction.Companion$.</ID>
    <ID>MaxLineLength:VimShortcutKeyAction.kt$VimShortcutKeyAction.Companion$val</ID>
    <ID>MemberNameEqualsClassName:Ranges.kt$Ranges$private val ranges: MutableList&lt;Range&gt; = mutableListOf()</ID>
    <ID>NestedBlockDepth:OptionsManager.kt$OptionsManager$ fun parseOptionLine(editor: Editor?, args: String, failOnBad: Boolean): Boolean</ID>
    <ID>ReturnCount:CmdHandler.kt$CmdHandler$private fun addAlias(cmd: ExCommand, editor: Editor?): Boolean</ID>
    <ID>ReturnCount:ExRanges.kt$Range.Companion$ @JvmStatic fun createRange(str: String, offset: Int, move: Boolean): Array&lt;Range&gt;?</ID>
    <ID>ReturnCount:VimMultipleCursorsExtension.kt$VimMultipleCursorsExtension.AllOccurrencesHandler$override fun executeInWriteAction(editor: Editor, context: DataContext)</ID>
    <ID>ReturnCount:VimMultipleCursorsExtension.kt$VimMultipleCursorsExtension.NextOccurrenceHandler$override fun executeInWriteAction(editor: Editor, context: DataContext)</ID>
    <ID>ReturnCount:VimShortcutKeyAction.kt$VimShortcutKeyAction$private fun isEnabled(e: AnActionEvent): Boolean</ID>
    <ID>ReturnCount:VisualMotionGroup.kt$VisualMotionGroup$private fun seemsLikeBlockMode(editor: Editor): Boolean</ID>
    <ID>ThrowsCount:CommandHandler.kt$CommandHandler$private fun checkArgs(cmd: ExCommand)</ID>
    <ID>TooManyFunctions:CommandBuilder.kt$CommandBuilder</ID>
    <ID>TooManyFunctions:CommandState.kt$CommandState</ID>
    <ID>TooManyFunctions:PutGroup.kt$PutGroup</ID>
    <ID>TooManyFunctions:Ranges.kt$Ranges</ID>
    <ID>TooManyFunctions:SearchHighlightsHelper.kt$com.maddyhome.idea.vim.helper.SearchHighlightsHelper.kt</ID>
    <ID>TooManyFunctions:VisualGroup.kt$com.maddyhome.idea.vim.group.visual.VisualGroup.kt</ID>
    <ID>TooManyFunctions:VisualMotionGroup.kt$VisualMotionGroup</ID>
  </CurrentIssues>
</SmellBaseline>
