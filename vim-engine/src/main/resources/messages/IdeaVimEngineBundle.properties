#
# Copyright 2003-2023 The IdeaVim authors
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE.txt file or at
# https://opensource.org/licenses/MIT.
#

e_interr=Interrupted
notexcmd=Not an editor command: {0}
intbadcmd=Internal error - invalid command: {0}
e_badrange=Unexpected character ''{0}'' in range
e_rangereq=Range required
e_argreq=Argument required
e_argforb=Argument forbidden
e_backrange=Backwards range given
e_zerocount=Zero count
e_trailing=Trailing characters
e_invcmd=Invalid command
e_null=Null argument
e_internal=Internal error
synerror=Syntax error in {0}{...}
e_invarg=Invalid argument: {0}

# Vim error messages should be listed by their error number. It is easier to find them that way, because we see the
# error number while interacting with Vim, not some kind of error name.
e_backslash=E10: \\ should be followed by /, ? or &
e_invrange=E16: Invalid range
E20=E20: Mark not set
e_nopresub=E33: No previous substitute regular expression
e_noprev=E34: No previous command
e_noprevre=E35: No previous regular expression
E39=E39: Number expected
e_re_damg=E43: Damaged match string
e_re_corr=E44: Currupted regexp program
E50=E50: Too many \\z(
E51=E51: Too many {0}(
E52=E52: Unmatched \\z(
E53=E53: Unmatched {0}%(
E54=E54: Unmatched {0}(
E55=E55: Unmatched {0})
E56=E56: {0}* operand could be empty
E57=E57: {0}+ operand could be empty
E58=E58: {0}{ operand could be empty
E59=E59: invalid character after {0}@
E60=E60: Too many complex {0}{...}s
E61=E61: Nested {0}*
E62=E62: Nested {0}{1}
E63=E63: invalid use of \\_
E64=E64: {0}{1} follows nothing
E65=E65: Illegal back reference
E66=E66: \\z( not allowed here
E67=E67: \\z1 et al. not allowed here
E68=E68: Invalid character after \\z
E69=E69: Missing ] after {0}%[
E70=E70: Empty {0}%[]
E71=E71: Invalid character after {0}%
e_toomsbra=E76: Too many [
E117=E117: Unknown function: {0}
E121=E121: Undefined variable: {0}
E129=E129: Function name required
E146=E146: Regular expressions can''t be delimited by letters
E147=E147: Cannot do :global recursive with a range
E148=E148: Regular expression missing from global
E174=E174: Command already exists: add ! to replace it
E176=E176: Invalid number of arguments
E183=E183: User defined commands must start with an uppercase letter
E184=E184: No such user-defined command: {0}
E191=E191: Argument must be a letter or forward/backward quote
E223=E223: recursive mapping
E348=E348: No string under cursor
E363=E363: pattern caused out-of-stack error
E369=E369: invalid item in {0}%[]
E384=E384: Search hit TOP without match for: {0}
E385=E385: Search hit BOTTOM without match for: {0}
E418=E418: I am a teapot
E446=E446: No file name under cursor
E461=E461: Illegal variable name: {0}
E471=E471: Argument required
E474=E474: Invalid argument: {0}
E475=E475: Invalid argument: {0}
E477=E477: No ! allowed
E481=E481: No range allowed
E486=E486: Pattern not found: {0}
E488=E488: Trailing characters: {0}
# Vim's message includes alternate files and the :p:h file name modifier, which we don't support
# E499: Empty file name for '%' or '#', only works with ":p:h"
E499=E499: Empty file name for '%'
E503=E503: Coffee is currently not available
E518=E518: Unknown option: {0}
E521=E521: Number required after =: {0}
E545=E545: Missing colon: {0}
E546=E546: Illegal mode: {0}
E548=E548: Digit expected: {0}
E549=E549: Illegal percentage: {0}
E691=E691: Can only compare List with List
E692=E692: Invalid operation for List
E694=E694: Invalid operation for Funcrefs
E695=E695: Cannot index a Funcref
E701=E701: Invalid type for len()
E703=E703: Using a Funcref as a Number
E719=E719: Cannot slice a Dictionary
E725=E725: Calling dict function without Dictionary: {0}
E728=E728: Using a Dictionary as a Number
E729=E729: Using a Funcref as a String
E730=E730: Using a List as a String
E731=E731: Using a Dictionary as a String
E735=E735: Can only compare Dictionary with Dictionary
E736=E736: Invalid operation for Dictionary
E745=E745: Using a List as a Number
E774=E774: 'operatorfunc' is empty
E804=E804: Cannot use '%' with Float
E805=E805: Using a Float as a Number
E806=E806: Using a Float as a String
E808=E808: Number or Float required
E841=E841: Reserved name, cannot be used for user defined command
E891=E891: Using a Funcref as a Float
E892=E892: Using a String as a Float
E893=E893: Using a List as a Float
E894=E894: Using a Dictionary as a Float
E939=E939: Positive count required
E1211=E1211: List required for argument {0}
E1214=E1214: Digraph must be just two characters: {0}

# Messages used by a single command should begin with "command.{cmd}."
# Messages used by multiple commands should begin with "message.{area}." where "area" is a name for the group of commands
command.action.not.found=Action not found: {0}
command.global.pattern.not.found=Pattern not found: {0}
command.global.pattern.found.in.every.line=Pattern found in every line: {0}
command.history.option.is.zero='history' option is zero
command.substitute.replace.with.prompt=Replace with {0} (y/n/a/q/l)?

message.search.hit.bottom=search hit BOTTOM, continuing at TOP
message.search.hit.top=search hit TOP, continuing at BOTTOM

# From openFile, used by :buffer, :edit, :find, etc.
message.open.file.not.found=Unable to find {0}

message.ex.output.more.prompt=-- MORE --
# TODO: Vim 7 changed this to "-- MORE -- SPACE/d/j: screen/page/line down, b/u/k: up, q: quit"
# However, we currently don't implement this
message.ex.output.more.prompt.full=-- MORE -- (RET: line, SPACE: page, d: half page, q: quit)
message.ex.output.end.prompt=Hit ENTER or type command to continue

ex.show.all.actions.0.1=--- Actions ---{0}{1}

# TODO: :buffer command messages should be error messages with E numbers
buffer.0.does.not.exist=Buffer {0} does not exist
no.matching.buffer.for.0=No matching buffer for {0}
no.write.since.last.change.add.to.override=No write since last change (add ! to override)
more.than.one.match.for.0=More than one match for {0}

recursion.detected.maximum.alias.depth.reached=Recursion detected, maximum alias depth reached.

error.invalid.command.argument=Error: invalid command argument
